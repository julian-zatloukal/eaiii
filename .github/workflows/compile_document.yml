# .github/workflows/compile_document.yml
name: Compile course PDF

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
    # -- checkout -------------------------------------------------------------
    - uses: actions/checkout@v4

    # -- Python --------------------------------------------------------------
    - uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    # -- OS packages (Chromium ‑ nbconvert relies on it) ---------------------
    - name: System dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser
        echo "PLAYWRIGHT_BROWSERS_PATH=0" >> $GITHUB_ENV   # keep cache local

    # -- Python libraries ----------------------------------------------------
    - name: Install Python libs
      run: |
        python -m pip install --upgrade pip
        pip install nbconvert[webpdf]==7.16.6 pypdf==5.4.0

    # -- Playwright browser --------------------------------------------------
    - name: Install Playwright Chromium
      run: playwright install chromium

    # -- Convert every notebook to PDF (parallel) ----------------------------
    - name: Build individual PDFs
      run: |
        mkdir -p build/pdfs
        find . -name "*.ipynb" -print0 | \
          xargs -0 -n1 -P "$(nproc)" -I{} \
          jupyter-nbconvert --to webpdf --no-input --allow-chromium-download \
                            "{}" --output-dir build/pdfs

    # -- Merge PDFs + cover + bookmarks --------------------------------------
    - name: Merge PDFs & write TOC
      run: |
        python - <<'PY'
        import os, re, sys
        from pathlib import Path
        from pypdf import PdfReader, PdfWriter

        pdf_root = Path("build/pdfs")
        out_file = Path("build/compiled.pdf")
        writer   = PdfWriter()

        # optional cover -----------------------------------------------------
        cover = Path("cover.pdf")
        if cover.exists():
            for p in PdfReader(str(cover)).pages:
                writer.add_page(p)
            writer.add_outline_item("Cover", 0)

        # collect directories 01_, 02_, … in ascending order -----------------
        dirs = sorted([d for d in Path(".").iterdir()
                       if d.is_dir() and re.match(r'\d+_', d.name)],
                      key=lambda d: int(d.name.split('_')[0]))

        def pdfs_in(d):
            return sorted((pdf_root/d.name).rglob("*.pdf"))

        page_index = len(writer.pages)            # start after cover (if any)
        for d in dirs:
            for pdf in pdfs_in(d):
                reader = PdfReader(str(pdf))
                writer.append(reader)
                # bookmark at the first page of each file
                writer.add_outline_item(pdf.stem, page_index)
                page_index += len(reader.pages)

        out_file.parent.mkdir(parents=True, exist_ok=True)
        with out_file.open("wb") as fh:
            writer.write(fh)
        PY

    # -- Share artefact ------------------------------------------------------
    - uses: actions/upload-artifact@v4
      with:
        name: compiled-pdf
        path: build/compiled.pdf
