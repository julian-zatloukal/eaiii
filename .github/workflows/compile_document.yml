# .github/workflows/build-pdf.yml  – syntax‑checked
name: Build PDF

on:
  push:
    branches: [ "main" ]          # no PR runs
    # still run on *any* content change but ignore repo‑meta files
    paths-ignore:
      - '**.md'
      - 'LICENSE'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { contents: write }

    env:
      PYTHON_VERSION: "3.12"
      CACHE_KEY: "pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-v1"

    steps:
    - uses: actions/checkout@v4

    # ---------- toolchain ---------------------------------------------------
    - uses: actions/setup-python@v5
      with:
        python-version: "${{ env.PYTHON_VERSION }}"

    - name: Restore pip cache
      id: pip-cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: "${{ env.CACHE_KEY }}"

    - name: Install build deps
      run: |
        python -m pip install --upgrade pip
        pip install "nbconvert[webpdf]==7.16.6" pypdf==5.4.0 parallel-bash
        python -m playwright install --with-deps   # cached

    # ---------- convert notebooks -------------------------------------------
    - name: Collect notebooks
      id: nb
      run: |
        mapfile -t NB < <(git ls-files '*.ipynb' | sort)
        printf '%s\n' "${NB[@]}" > notebook_list.txt
        echo "count=${#NB[@]}" >>"$GITHUB_OUTPUT"

    - name: Convert in parallel
      run: |
        cat notebook_list.txt | pb-parallel -j2 -- \
          "jupyter nbconvert --to webpdf --embed-images --output-dir build/pdfs {}"

    # ---------- merge PDFs ---------------------------------------------------
    - name: Merge
      run: |
        python <<'PY'
        import pathlib, datetime, sys
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import A4
        from pypdf import PdfReader, PdfWriter

        root = pathlib.Path('build/pdfs')
        pdfs = sorted(root.glob('*.pdf'))
        if not pdfs:
            sys.exit("No PDFs!")

        cover = root/'_cover.pdf'
        c = canvas.Canvas(str(cover), pagesize=A4)
        c.setFont("Helvetica-Bold", 26)
        c.drawCentredString(A4[0]/2, A4[1]*0.70, "Electrónica Aplicada III")
        c.setFont("Helvetica", 14)
        c.drawCentredString(A4[0]/2, A4[1]*0.65,
                            f"Compilación automática – {datetime.date.today()}")
        c.showPage(); c.save()
        pdfs.insert(0, cover)

        writer = PdfWriter()
        outline_root = writer.add_outline_item("Portada", 0)
        page_no = 0
        for p in pdfs:
            reader = PdfReader(str(p))
            writer.append(reader)
            title = p.stem.replace('_', ' ')
            chapter = p.parts[0]
            # one top‑level item per first‑level directory
            if not any(o.title == chapter for o in writer.outline):
                chapter_node = writer.add_outline_item(chapter, page_no)
            else:
                chapter_node = next(o for o in writer.outline if o.title == chapter)
            writer.add_outline_item(title, page_no, parent=chapter_node)
            page_no += len(reader.pages)

        out = pathlib.Path('EAIII_full.pdf')
        with out.open('wb') as f: writer.write(f)
        PY

    - uses: actions/upload-artifact@v4
      with:
        name: EAIII_full.pdf
        path: EAIII_full.pdf
