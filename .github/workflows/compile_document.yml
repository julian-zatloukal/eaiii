name: Compile Notebooks to PDF

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.x'
          cache: pip

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ghostscript \
            pandoc \
            texlive-xetex \
            texlive-fonts-recommended \
            texlive-latex-extra \
            wkhtmltopdf

      - name: Install Python libs
        run: |
          pip install --upgrade pip
          pip install \
            jupyter \
            matplotlib \
            scipy \
            scikit-rf \
            nbsphinx \
            sphinx_copybutton \
            sphinx_gallery

      - name: Cache generated PDFs
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-notebooks-pdfs-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-notebooks-pdfs-

      - name: Convert notebooks to PDFs (parallel, skip checkpoints & up-to-date)
        run: |
          mkdir -p build
          find . \
            -type f \
            -name '*.ipynb' \
            ! -path '*/.ipynb_checkpoints/*' \
            -print0 \
          | sort -z \
          | xargs -0 -n1 -P4 bash -c '
            nb="$1"
            rel="${nb#./}"
            out="build/${rel%.ipynb}.pdf"
            dir="$(dirname "$out")"
            mkdir -p "$dir"

            # skip if PDF is newer than notebook
            if [[ -f "$out" && "$out" -nt "$nb" ]]; then
              echo "‚è≠Ô∏è  Up-to-date: $nb"
              exit 0
            fi

            echo "üîÑ Converting: $nb"
            # 1) Try LaTeX ‚Üí PDF
            if jupyter nbconvert "$nb" \
                 --to pdf \
                 --execute \
                 --ExecutePreprocessor.timeout=600 \
                 --PDFExporter.latex_command="['xelatex','-interaction=batchmode','%(filename)s']" \
                 --output-dir="$dir"; then
              echo "   ‚úÖ LaTeX PDF succeeded"
              exit 0
            fi

            echo "   ‚ö†Ô∏è  LaTeX failed, falling back to HTML‚ÜíPDF"
            # 2) Fallback: HTML ‚Üí PDF
            if jupyter nbconvert "$nb" \
                 --to html \
                 --execute \
                 --ExecutePreprocessor.timeout=600 \
                 --output-dir="$dir"; then
              html="$dir/$(basename \"${nb%.ipynb}.html\")"
              if wkhtmltopdf --enable-local-file-access --quiet "$html" "$out"; then
                echo "   ‚úÖ HTML‚ÜíPDF succeeded"
              else
                echo "   ‚ùå wkhtmltopdf failed, skipping"
              fi
            else
              echo "   ‚ùå HTML export failed, skipping"
            fi
          ' _

      - name: Merge PDFs
        run: |
          mapfile -t pdfs < <(find build -type f -name '*.pdf' | sort)
          if [ "${#pdfs[@]}" -eq 0 ]; then
            echo "No PDFs to merge; exiting."
            exit 0
          fi
          echo "üîó Merging ${#pdfs[@]} PDFs ‚Üí all_notebooks.pdf"
          gs -dBATCH -dNOPAUSE -q \
             -sDEVICE=pdfwrite \
             -sOutputFile=all_notebooks.pdf \
             "${pdfs[@]}"

      - name: Upload merged PDF
        uses: actions/upload-artifact@v4
        with:
          name: all-notebooks-pdf
          path: all_notebooks.pdf
