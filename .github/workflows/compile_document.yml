name: Compile Notebooks to PDF

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.x'
          cache: pip

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ghostscript \
            pandoc \
            texlive-xetex \
            texlive-fonts-recommended \
            texlive-latex-extra \
            wkhtmltopdf

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install \
            jupyter \
            matplotlib \
            scipy \
            scikit-rf \
            nbsphinx \
            sphinx_copybutton \
            sphinx_gallery

      - name: Convert notebooks to PDFs (with HTML fallback)
        run: |
          mkdir -p build
          find . -type f -name '*.ipynb' | sort | while read -r nb; do
            rel="${nb#./}"
            out="build/${rel%.ipynb}.pdf"
            dir="$(dirname "$out")"
            mkdir -p "$dir"
            echo "üîÑ Converting $nb ‚Üí $out"

            # 1) Try LaTeX ‚Üí PDF (batchmode to suppress minor stops)
            if jupyter nbconvert "$nb" \
                 --to pdf \
                 --execute \
                 --ExecutePreprocessor.timeout=600 \
                 --PDFExporter.latex_command="['xelatex','-interaction=batchmode','%(filename)s']" \
                 --output-dir="$dir"; then
              echo "‚úÖ LaTeX PDF OK"
              continue
            fi

            echo "‚ö†Ô∏è  LaTeX PDF failed, trying HTML‚ÜíPDF fallback"

            # 2) Fallback: HTML ‚Üí PDF via wkhtmltopdf
            if jupyter nbconvert "$nb" \
                 --to html \
                 --execute \
                 --ExecutePreprocessor.timeout=600 \
                 --output-dir="$dir"; then

              html="${dir}/$(basename "${nb%.ipynb}.html")"
              if wkhtmltopdf "$html" "$out"; then
                echo "‚úÖ HTML‚ÜíPDF OK"
              else
                echo "‚ùå Fallback wkhtmltopdf failed for $nb ‚Äî skipping"
              fi

            else
              echo "‚ùå HTML export failed for $nb ‚Äî skipping"
            fi
          done

      - name: Merge PDFs
        run: |
          mapfile -t pdfs < <(find build -type f -name '*.pdf' | sort)
          if [ "${#pdfs[@]}" -eq 0 ]; then
            echo "No PDFs found, nothing to do."
            exit 0
          fi
          echo "üîó Merging ${#pdfs[@]} PDFs ‚Üí all_notebooks.pdf"
          gs -dBATCH -dNOPAUSE -q \
             -sDEVICE=pdfwrite \
             -sOutputFile=all_notebooks.pdf \
             "${pdfs[@]}"

      - name: Upload merged PDF
        uses: actions/upload-artifact@v4
        with:
          name: all-notebooks-pdf
          path: all_notebooks.pdf
